library(cluster, lib.loc = "C:/Program Files/R/R-4.0.1/library")
energy_harvesters_lambdadistance_sorted <- read.csv("C:/Users/nandy/source/repos/FunctionalModelSimilarity/FunctionalModelSimilarity/data/03_processed/energy_harvesters_lambdadistance_sorted.csv", row.names=1)
View(energy_harvesters_lambdadistance_sorted)
df <- scale(energy_harvesters_lambdadistance_sorted)
install.packages(c("factoextra"))
library(cluster)
library(factoextra)
pam.res <- pam(df, 7)
print(pam.res)
print(res$data)
print(pam.res$data)
fviz_cluster(pam.res)
fviz_cluster(pam.res, ellipse.type="norm")
fviz_cluster(pam.res, ellipse.type="convex")
print(pam.res$data)
pam.res@cluster
pam.res
pam.res$clustering
energy_harvesters_vector <- read.csv("C:/Users/nandy/source/repos/FunctionalModelSimilarity/FunctionalModelSimilarity/data/02_intermediate/energy_harvesters_vector.csv", row.names=1)
View(energy_harvesters_vector)
View(energy_harvesters_vector)
energy_harvesters_vector <- read.csv("C:/Users/nandy/source/repos/FunctionalModelSimilarity/FunctionalModelSimilarity/data/02_intermediate/energy_harvesters_vector.csv", row.names=2)
View(energy_harvesters_vector)
View(energy_harvesters_vector)
ehv <- energy_harvesters_vector[-c(1), ]
View(ehv)
ehv <- ehv[-c(1), ]
View(ehv)
dd <- cbind(ehv, cluster=pam.res$cluster)
dd
View(dd)
mds <- cmdscale(energy_harvesters_lambdadistance_sorted)
plot(mds, pch=19, col=rainbow(7)[pam.res$clustering])
fviz_cluster(pam.res, data=ehv, ellipse.type="convex")
pam.results$data <- ehv
pam.result$data <- ehv
pam.res$data <- ehv
fviz_cluster(pam.res)
clear
View(dd)
View(pam.res)
mean(a)
a <- c(5,2,4)
mean(a)
table(emp.data)
emp.data <- data.frame(
emp_id = c(741, 882, 293, 410, 312),
emp_name = c("Ryan","Dan","","Sarah","Gary"),
salary = c(600,515.2,611.0,-99,526.5),
department = c("HR", "Not Applicable", "Marketing", "Engineering", "Marketing"),
hours_worked = c(40, 45, 10, 18, 15),
stringsAsFactors = FALSE
)
table(emp.data)
emp.data$emp_id
emp.data$emp_name
table(emp.data$emp_name)
# Your code here
length(d[d > 350])
# Your code here
a = 8:20
b = 30:18
# Your code here
d <- a*b
d
# Your code here
d[4:6]
# Your code here
d[d < 300]
# Your code here
length(d[d > 350])
# Your code here
quakes <- read.csv('quakes.csv')
# Your code here
mean_mag <- mean(quakes$mag, na.rm = TRUE)
mean_mag
# Your code here
length(quakes[quakes$mag > mean_mag & !is.na(quakes$mag), 'mag'])
# Your code here
sd(quakes$stations, na.rm=TRUE)
# Your code here
length(quakes[is.na(quakes$stations), 'stations'])
quakes$stations
# Your code here
length(quakes[is.na(quakes$stations), 'stations'])
# Your code here
quakes[max(quakes$depth, na.rm=TRUE), 'stations']
```{r}
# Your code here
library(ggplot2)
# Your code here
library(ggplot2)
q <- ggplot(quakes, aes(x=lat, y=long))
q + geom_point(aes(size = mag, color=mag)) +scale_size("mag", trans="exp")
f <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width))
f + geom_point(aes(color = factor(Species)))
# Hierarchical clustering
library(cluster)
library(factoextra)
library(fpc)
hclust_setk <- function(sim_matrix, num_clusters){
hc <- agnes(sim_matrix, diss=TRUE, method="ward")
pltree(hc, cex = 0.6, hang = -1, main = "Dendrogram")
nc = num_clusters
clusterCut <- cutree(hc, nc)
rect.hclust(tree = hc, k = nc, which = 1:nc, border = 1:nc, cluster = clusterCut)
return(clusterCut)
}
scls <- hclust_setk(energy_harvesters_smc, 7)
setwd("C:/Users/nandy/source/repos/FunctionalModelSimilarity/FunctionalModelSimilarity/Rscripts")
energy_harvesters_deltacon <- read.csv("../data/03_processed/energy_harvesters_deltacon_sorted.csv", row.names=1)
energy_harvesters_ged <- read.csv("../data/03_processed/energy_harvesters_geddistance_sorted.csv", row.names=1)
energy_harvesters_spectral <- read.csv("../data/03_processed/energy_harvesters_lambdadistance_sorted.csv", row.names=1)
energy_harvesters_smc <- read.csv("../data/03_processed/energy_harvesters_hammingdist.csv", row.names=1)
energy_harvesters_jaccard <- read.csv("../data/03_processed/energy_harvesters_jaccarddist.csv", row.names=1)
energy_harvesters_cosine <- read.csv("../data/03_processed/energy_harvesters_cosinedist.csv", row.names=1)
energy_harvesters_veo <- read.csv("../data/03_processed/energy_harvesters_vertexedgeoverlap.csv", row.names=1)
energy_harvesters_netsimile <- read.csv("../data/03_processed/energy_harvesters_netsimile.csv", row.names=1)
energy_harvesters_resistance <- read.csv("../data/03_processed/energy_harvesters_resistance.csv", row.names=1)
energy_harvesters_vector <- read.csv("../data/02_intermediate/energy_harvesters_vector.csv", row.names=1)
energy_harvesters_properties <- read.csv("../data/03_processed/energy_harvesters_properties.csv", row.names=1)
toys_deltacon <- read.csv("../data/03_processed/appliances_and_toys_deltacon_V2.csv", row.names=1)
toys_ged <- read.csv("../data/03_processed/appliances_and_toys_geddistance_V2.csv", row.names=1)
toys_spectral <- read.csv("../data/03_processed/appliances_and_toys_lambdadistance_V2.csv", row.names=1)
toys_smc <- read.csv("../data/03_processed/appliances_and_toys_hammingdist_V2.csv", row.names=1)
toys_jaccard <- read.csv("../data/03_processed/appliances_and_toys_jaccarddist_V2.csv", row.names=1)
toys_cosine <- read.csv("../data/03_processed/appliances_and_toys_cosinedist_V2.csv", row.names=1)
toys_veo <- read.csv("../data/03_processed/appliances_and_toys_vertexedgeoverlap_V2.csv", row.names=1)
toys_netsimile <- read.csv("../data/03_processed/appliances_and_toys_netsimile_V2.csv", row.names=1)
toys_resistance <- read.csv("../data/03_processed/appliances_and_toys_resistance_V2.csv", row.names=1)
toys_vector <- read.csv("../data/02_intermediate/appliances_and_toys_vector_V2.csv", row.names=1)
toys_properties <- read.csv("../data/03_processed/appliances_and_toys_V2_properties.csv", row.names=1)
energy_harvesters_vector <- energy_harvesters_vector[-c(1, 2), ]
toys_vector <- toys_vector[-c(1), ]
harvestertype <- c(rep(('inductive'),each=9),
rep(('piezoelectric'),each=6),
rep(('wind'),each=6),
rep(('wave'),each=3),
rep(('solar'),each=6),
rep(('thermal'),each=5),
rep(('hybrid'),each=4))
energy_harvesters_vector <- cbind(energy_harvesters_vector, category = harvestertype)
library(factoextra)
library(cluster)
# Hierarchical clustering
library(cluster)
library(factoextra)
library(fpc)
hclust_setk <- function(sim_matrix, num_clusters){
hc <- agnes(sim_matrix, diss=TRUE, method="ward")
pltree(hc, cex = 0.6, hang = -1, main = "Dendrogram")
nc = num_clusters
clusterCut <- cutree(hc, nc)
rect.hclust(tree = hc, k = nc, which = 1:nc, border = 1:nc, cluster = clusterCut)
return(clusterCut)
}
scls <- hclust_setk(energy_harvesters_smc, 7)
setwd("C:/Users/nandy/Desktop/human-design-similarity")
dc <- read.csv("designrepo_24_deltacon.csv",row.names=1)
netsim <- read.csv("designrepo_24_netsimile.csv",row.names=1)
spectral <- read.csv("designrepo_24_lambdadistance.csv",row.names=1)
jaccard <- read.csv("designrepo_24_jaccarddistance.csv",row.names=1)
cosine <- read.csv("designrepo_24_cosinedistance.csv",row.names=1)
hamming <- read.csv("designrepo_24_hammingdistance.csv",row.names=1)
d <- dc
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7, col=tvcls)
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7, col=tvcls)
d <- dc
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
d <- spectral
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
d <- netsim
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
d <- hamming
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
d <- jaccard
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
d <- cosine
# from https://www.statmethods.net/advstats/mds.html
fit <- cmdscale(d,eig=TRUE, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Metric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
fit <- isoMDS(d, k=2) # k is the number of dim
fit # view results
# plot solution
x <- fit$points[,1]
y <- fit$points[,2]
plot(x, y, xlab="Coordinate 1", ylab="Coordinate 2",
main="Nonmetric MDS", type="n")
text(x, y, labels = row.names(d), cex=.7) #removed col = tvcls
